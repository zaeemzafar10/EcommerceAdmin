// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  products Product[]
}

model Inventory {
  id       Int       @id @default(autoincrement())
  stock    Int
  products Product[]
}

model Product  {
  id    Int    @id @default(autoincrement())
  name  String @unique
  price Float
  categoryId  Int
  inventoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventory    Inventory  @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems OrderItem[]

}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  address  String
  role      Role     @default(USER)
  orders  Order[]
}

model Order {
  id        Int       @id @default(autoincrement())
  userId    Int
  items      OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}